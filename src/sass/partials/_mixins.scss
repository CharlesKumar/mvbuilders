%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}  // can't work across media queries, placeholders are used to reduce duplicate css codes

@mixin vishidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}


@mixin flexitemsplitter($col, $gutter: 0px, $bpn: '') { // dependency of flecgrid()
    @for $i from 1 through $col {
        .col-#{$bpn}#{$i} {
            flex: 1;
            // flex: 1 1 (100/$i)* 1% ;
            // flex-basis: (100/$i)* 1% ;
            max-width: (100/$i)* 1% ;
            margin-right: $gutter;
        }
    }
}

@mixin spacing($class, $prop, $iteration) {
  @for $i from 1 through $iteration {
    .#{$class}#{$i} {
        #{$prop}: 0.25*$i* 1rem;
    }
  }
}


@mixin minwidthbp($bp) {
    @media screen and (min-width: #{$bp}) {
        @content;
    }
}

@mixin maxwidthbp($bp) {
    @media screen and (max-width: #{$bp}) {
        @content;
    }
}

@mixin hidebp($breakpoints) {
    @each $bp, $val in $breakpoints {
        @if map-has-key($breakpoints, $bp) {
            @include minwidthbp(#{map-get($breakpoints, $bp)}) {
                .#{$bp}-hide {
                    // visibility: hidden;

                    // position: absolute;
                    // top: -9999px;
                    // left: -9999px;

                    // position:absolute;
                    // clip:rect(0 0 0 0);

                    // @extend %visuallyhidden;
                    @include vishidden;
                }
            }
        }

        @else {
            @warn "Unfortunately, no value could be retrieved from `#{$bp}`. "
                + "Please make sure it is defined in `$breakpoints` map.";
        }
    }
}

@mixin flexgrid($breakpoints, $col, $gutter: 0px) {
    @each $bp, $val in $breakpoints {
        @if map-has-key($breakpoints, $bp) {
            @include minwidthbp(#{map-get($breakpoints, $bp)}) {
                @include flexitemsplitter($col, $gutter, $bp) ;
            }
        }

        @else {
            @warn "Unfortunately, no value could be retrieved from `#{$bp}`. "
                + "Please make sure it is defined in `$breakpoints` map.";
        }
    }
}
